name: 'Contrast Security SCA'
description: 'Contrast Source Composition Analysis'
outputs:
  fingerprint:
    description: "Output from the fingerprint command"
    value: ${{ steps.run-fingerprint.outputs.fingerprint }}
inputs:
  apiKey:
    description: 'An agent API key provided by Contrast (required).'
    required: true
  authHeader:
    description: 'User authorization credentials provided by Contrast (required).'
    required: true
  orgId:
    description: 'The ID of your organization in Contrast (required).'
    required: true
  filePath:
    description: 'Specify the directory in which to search for project configuration files (required).'
    required: true
  repositoryId:
    description: 'The ID of your repo.'
    required: false
  projectGroupId:
    description: 'The ID of your project Groups.'
    required: false
  applicationId:
    description: 'The ID of your application.'
    required: false
  apiUrl:
    description: 'The name of the host. Includes the protocol section of the URL (https://). Defaults to https://ce.contrastsecurity.com. (optional)'
    required: false
    default: "https://ce.contrastsecurity.com"
  severity:
    description: 'Allows user to report libraries with vulnerabilities above a chosen severity level. Values for level are high, medium or low. (Note: Use this input in combination with the fail input, otherwise the action will exit)'
    required: false
    default: "CRITICAL"
  fail:
    description: 'When set to true, fails the action if CVEs have been detected that match at least the severity option specified.'
    required: false
  ignoreDev:
    description: 'When set to true, excludes developer dependencies from the results.'
    required: false
  outputSummary:
    description: 'Defaults to true.  When set to true, writes the output of the audit to the GitHub Actions Summary.'
    required: false
    default: 'true'
  repoUrl:
    description: 'When set, will pass the optional repo url parameter to the contrast cli'
    required: false
  repoName:
    description: 'When set, will pass the optional repo name parameter to the contrast cli'
    required: false
  externalId:
    description: 'When set, will pass the optional external id parameter to the contrast cli'
    required: false
  auditTimeout:
    description: 'Sets the timeout for an audit in seconds, Default: 600 (10 minutes)'
    required: false
    default: '600'
  metadata:
    description: 'Metadata filter to be passed to the Contrast CLI when running sarif command'
    required: false
  ghasEnabled:
    description: 'When set to true, will upload sarif to the GHAS integration'
    required: false
    default: 'true'
  legacy:
    description: 'When set to true, uses the legacy audit command.'
    required: false
  modifier:
    description: 'When set this will be added as a suffix to the output file name.'
    required: false


  command:
    description: 'Command to run cli with audit/fingerprint/sarif'
    required: false
    default: audit

runs:
  using: "composite"
  steps:
    - name: Get Latest CLI
      run: |
        echo "Downloading Contrast CLI 2.3.0"
        curl --location 'https://pkg.contrastsecurity.com/artifactory/cli/v2/2.3.0/linux/contrast' --output contrast
      shell: bash
    - run: chmod +x contrast
      shell: bash

    - name: Get CLI Required Arguments
      id: required-args
      shell: bash
      run: |
        echo "Setting Required Args..."
        args=()
        args+=("--api-key ${{ inputs.apiKey }}")
        args+=("--authorization ${{ inputs.authHeader }}")
        args+=("--organization-id ${{ inputs.orgId }}")
        args+=("--host ${{ inputs.apiUrl }}")

        echo "args=${args[@]}" >> $GITHUB_OUTPUT

    - name: Get CLI Optional Arguments
      id: optional-args
      shell: bash
      run: |
        echo "Setting Optional Args..."
        args=()      
        if [ -n "${{ inputs.repositoryId }}" ]; then
          args+=("--repository-id")
          args+=("${{ inputs.repositoryId }}")
        fi
        if [ -n "${{ inputs.repoUrl }}" ]; then
          args+=("--repository-url")
          args+=("${{ inputs.repoUrl }}")
        fi
        if [ -n "${{ inputs.repoName }}" ]; then
          args+=("--repository-name")
          args+=("${{ inputs.repoName }}")
        fi
        if [ -n "${{ inputs.externalId }}" ]; then
          args+=("--external-id")
          args+=("${{ inputs.externalId }}")
        fi
        if [ -n "${{inputs.filePath}}" ]; then
          args+=("--file")
          args+=("${{ inputs.filePath }}")
        fi
        if [ "${{ inputs.command}}" = 'audit' ]; then
          args+=("--severity")
          args+=("${{ inputs.severity }}")
          args+=("--timeout")
          args+=("${{ inputs.auditTimeout }}")
        fi
        if [ "${{ inputs.command}}" = 'sarif' ]; then
          args+=("--severity")
          args+=("${{ inputs.severity }}")
        fi
        if [ -n "${{inputs.metadata}}" ]; then
          args+=("--metadata")
          args+=("${{ inputs.metadata }}")
        fi
        if [ -n "${{inputs.applicationId}}" ]; then
          args+=("--application-id")
          args+=("${{ inputs.applicationId }}")
        fi
        if [ -n "${{inputs.projectGroupId}}" ]; then
          args+=("--project-group-id")
          args+=("${{ inputs.projectGroupId }}")
        fi
        if [ "${{inputs.fail}}" = true ]; then
          args+=("--fail")
        fi
        if [ "${{inputs.ignoreDev}}" = true ]; then
          args+=("--ignore-dev")
        fi
        if [ "${{inputs.legacy}}" = true ]; then
          args+=("--legacy")
        fi
        if [ "${{inputs.outputSummary}}" = true ]; then          
          echo "OUTPUT_SUMMARY=true" >> $GITHUB_ENV
        else
          echo "OUTPUT_SUMMARY=false" >> $GITHUB_ENV
        fi

        echo "args=${args[@]}" >> $GITHUB_OUTPUT

    - name: Generate Upload Suffix Suffix
      id: upload-suffix
      shell: bash
      run: |
        if [ -n "${{ inputs.modifier }}" ]; then
          echo "suffix=-${{ inputs.modifier }}" >>  "$GITHUB_OUTPUT"
        else
         random_suffix=$(openssl rand -base64 4 | tr -dc 'a-zA-Z0-9')
         echo "suffix=-$random_suffix" >>  "$GITHUB_OUTPUT"
        fi

    - name: Run Contrast Fingerprint CLI Command
      if: ${{ inputs.command == 'fingerprint' }}
      id: run-fingerprint
      shell: bash
      run: |
        echo "Running the Contrast Fingerprint Command..."
        ./contrast fingerprint ${{ steps.required-args.outputs.args }} ${{ steps.optional-args.outputs.args }} --log
        ls
        echo fingerprint=$(cat fingerPrintInfo.json) >> $GITHUB_OUTPUT

    - name: Upload output file
      if: ${{ inputs.command == 'fingerprint' }}
      uses: actions/upload-artifact@v4
      with:
        name: fingerPrintInfo${{steps.upload-suffix.outputs.suffix}}.json
        path: fingerPrintInfo.json

    - name: Upload log file
      if: ${{ inputs.command == 'fingerprint' }}
      uses: actions/upload-artifact@v4
      with:
        name: fingerPrint${{steps.upload-suffix.outputs.suffix}}.log
        path: contrast.log

    - name: Run Contrast Audit CLI Command
      if: ${{ inputs.command == 'audit' }}
      continue-on-error: true
      id: run-audit
      shell: bash
      run: |
        echo "Running the Contrast Audit Command..."
        ./contrast audit ${{ steps.required-args.outputs.args }} ${{ steps.optional-args.outputs.args }} --track --log --save >> output.txt

    - name: Send Output to Step Summary
      if: ${{ inputs.command == 'audit' }}
      shell: bash
      run: |
        eval cat ./output.txt ${OUTPUT_SUMMARY:+" >> $GITHUB_STEP_SUMMARY "}

    - name: Get Log output name
      if: ${{ inputs.command == 'audit' }}
      id: get-log-out-name
      shell: bash
      run: |
        dir=${{ github.workspace }}
        filename=$(echo '${{ inputs.filepath }}' | sed "s|$dir/||; s|/|-|g")
        echo "log_out_name=$filename" >> "$GITHUB_OUTPUT"

    - name: Upload log file
      if: ${{ inputs.command == 'audit' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.get-log-out-name.outputs.log_out_name }}${{steps.upload-suffix.outputs.suffix}}.contrast.log
        path: contrast.log

    - name: Get SBOM filename
      if: ${{ inputs.command == 'audit' && steps.run-audit.outcome=='success'}}
      id: get-sbom-filename
      shell: bash
      run: |      
        filename=$(cat ./output.txt | grep -o -E '[0-9a-fA-F]{8}(-[0-9a-fA-F]{4}){3}-[0-9a-fA-F]{12}-sbom-.*\.json')
        echo "sbom_filename=$filename" >> "$GITHUB_OUTPUT"

    - name: Upload sbom file
      if: ${{ inputs.command == 'audit' && steps.run-audit.outcome=='success'}}
      uses: actions/upload-artifact@v4
      with:
        name: sbom${{steps.upload-suffix.outputs.suffix}}.json
        path: ${{ steps.get-sbom-filename.outputs.sbom_filename }}


    - name: Check Audit outcome
      if: ${{ inputs.command == 'audit' }}
      shell: bash
      run: |
        if [[ "${{ steps.run-audit.outcome }}" != "success" ]]; then
          echo "Audit failed check logs in ${{ steps.get-log-out-name.outputs.log_out_name }}.contrast.log for more info"
          exit 1
        fi

    - name: Run Contrast Sarif CLI Command
      if: ${{ inputs.command == 'sarif' }}
      continue-on-error: true
      id: run-sarif
      shell: bash
      run: |
        echo "Running the Contrast Sarif Command..."
        ./contrast sarif ${{ steps.required-args.outputs.args }} ${{ steps.optional-args.outputs.args }} 
        echo sarif=$(cat contrast.sarif) >> $GITHUB_OUTPUT
    - name: Upload sarif file to summary
      if: ${{ inputs.command == 'sarif' }}
      uses: actions/upload-artifact@v4
      with:
        name: contrast${{steps.upload-suffix.outputs.suffix}}.sarif
        path: contrast.sarif

    - name: Upload SARIF file
      if: ${{ inputs.command == 'sarif' && inputs.ghasEnabled == 'true'}}
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: contrast.sarif

